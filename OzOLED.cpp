/*
  OzOLED.cpp - 0.96' I2C 128x64 OLED Driver Library
  2014 Copyright (c) OscarLiang.net  All right reserved.
 
  Author: Oscar Liang
  
  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

*/

/* 26/10/2015 cbp Added Latin1 upper 128 font
 * 			 Define SH1100 sets line start offset for sh1100
*/


#include "OzOLED.h"
#include <Wire.h>
#include <avr/pgmspace.h>

#ifdef SH1100
#define XOFFSET  2
#else
#define XOFFSET  0
#endif

// 8x8 Font ASCII 32 - 127 Implemented
// Users can modify this to support more characters(glyphs)
// BasicFont is placed in code memory.

// This font be freely used without any restriction(It is placed in public domain)
const byte BasicFont[][8] PROGMEM = {
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x5F,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x07,0x00,0x07,0x00,0x00,0x00},
	{0x00,0x14,0x7F,0x14,0x7F,0x14,0x00,0x00},
	{0x00,0x24,0x2A,0x7F,0x2A,0x12,0x00,0x00},
	{0x00,0x23,0x13,0x08,0x64,0x62,0x00,0x00},
	{0x00,0x36,0x49,0x55,0x22,0x50,0x00,0x00},
	{0x00,0x00,0x05,0x03,0x00,0x00,0x00,0x00},
	{0x00,0x1C,0x22,0x41,0x00,0x00,0x00,0x00},
	{0x00,0x41,0x22,0x1C,0x00,0x00,0x00,0x00},
	{0x00,0x08,0x2A,0x1C,0x2A,0x08,0x00,0x00},
	{0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00},
	{0x00,0xA0,0x60,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00},
	{0x00,0x60,0x60,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x20,0x10,0x08,0x04,0x02,0x00,0x00},
	{0x00,0x3E,0x51,0x49,0x45,0x3E,0x00,0x00},
	{0x00,0x00,0x42,0x7F,0x40,0x00,0x00,0x00},
	{0x00,0x62,0x51,0x49,0x49,0x46,0x00,0x00},
	{0x00,0x22,0x41,0x49,0x49,0x36,0x00,0x00},
	{0x00,0x18,0x14,0x12,0x7F,0x10,0x00,0x00},
	{0x00,0x27,0x45,0x45,0x45,0x39,0x00,0x00},
	{0x00,0x3C,0x4A,0x49,0x49,0x30,0x00,0x00},
	{0x00,0x01,0x71,0x09,0x05,0x03,0x00,0x00},
	{0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x00},
	{0x00,0x06,0x49,0x49,0x29,0x1E,0x00,0x00},
	{0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00},
	{0x00,0x00,0xAC,0x6C,0x00,0x00,0x00,0x00},
	{0x00,0x08,0x14,0x22,0x41,0x00,0x00,0x00},
	{0x00,0x14,0x14,0x14,0x14,0x14,0x00,0x00},
	{0x00,0x41,0x22,0x14,0x08,0x00,0x00,0x00},
	{0x00,0x02,0x01,0x51,0x09,0x06,0x00,0x00},
	{0x00,0x32,0x49,0x79,0x41,0x3E,0x00,0x00},
	{0x00,0x7E,0x09,0x09,0x09,0x7E,0x00,0x00},
	{0x00,0x7F,0x49,0x49,0x49,0x36,0x00,0x00},
	{0x00,0x3E,0x41,0x41,0x41,0x22,0x00,0x00},
	{0x00,0x7F,0x41,0x41,0x22,0x1C,0x00,0x00},
	{0x00,0x7F,0x49,0x49,0x49,0x41,0x00,0x00},
	{0x00,0x7F,0x09,0x09,0x09,0x01,0x00,0x00},
	{0x00,0x3E,0x41,0x41,0x51,0x72,0x00,0x00},
	{0x00,0x7F,0x08,0x08,0x08,0x7F,0x00,0x00},
	{0x00,0x41,0x7F,0x41,0x00,0x00,0x00,0x00},
	{0x00,0x20,0x40,0x41,0x3F,0x01,0x00,0x00},
	{0x00,0x7F,0x08,0x14,0x22,0x41,0x00,0x00},
	{0x00,0x7F,0x40,0x40,0x40,0x40,0x00,0x00},
	{0x00,0x7F,0x02,0x0C,0x02,0x7F,0x00,0x00},
	{0x00,0x7F,0x04,0x08,0x10,0x7F,0x00,0x00},
	{0x00,0x3E,0x41,0x41,0x41,0x3E,0x00,0x00},
	{0x00,0x7F,0x09,0x09,0x09,0x06,0x00,0x00},
	{0x00,0x3E,0x41,0x51,0x21,0x5E,0x00,0x00},
	{0x00,0x7F,0x09,0x19,0x29,0x46,0x00,0x00},
	{0x00,0x26,0x49,0x49,0x49,0x32,0x00,0x00},
	{0x00,0x01,0x01,0x7F,0x01,0x01,0x00,0x00},
	{0x00,0x3F,0x40,0x40,0x40,0x3F,0x00,0x00},
	{0x00,0x1F,0x20,0x40,0x20,0x1F,0x00,0x00},
	{0x00,0x3F,0x40,0x38,0x40,0x3F,0x00,0x00},
	{0x00,0x63,0x14,0x08,0x14,0x63,0x00,0x00},
	{0x00,0x03,0x04,0x78,0x04,0x03,0x00,0x00},
	{0x00,0x61,0x51,0x49,0x45,0x43,0x00,0x00},
	{0x00,0x7F,0x41,0x41,0x00,0x00,0x00,0x00},
	{0x00,0x02,0x04,0x08,0x10,0x20,0x00,0x00},
	{0x00,0x41,0x41,0x7F,0x00,0x00,0x00,0x00},
	{0x00,0x04,0x02,0x01,0x02,0x04,0x00,0x00},
	{0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00},
	{0x00,0x01,0x02,0x04,0x00,0x00,0x00,0x00},
	{0x00,0x20,0x54,0x54,0x54,0x78,0x00,0x00},
	{0x00,0x7F,0x48,0x44,0x44,0x38,0x00,0x00},
	{0x00,0x38,0x44,0x44,0x28,0x00,0x00,0x00},
	{0x00,0x38,0x44,0x44,0x48,0x7F,0x00,0x00},
	{0x00,0x38,0x54,0x54,0x54,0x18,0x00,0x00},
	{0x00,0x08,0x7E,0x09,0x02,0x00,0x00,0x00},
	{0x00,0x18,0xA4,0xA4,0xA4,0x7C,0x00,0x00},
	{0x00,0x7F,0x08,0x04,0x04,0x78,0x00,0x00},
	{0x00,0x00,0x7D,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x80,0x84,0x7D,0x00,0x00,0x00,0x00},
	{0x00,0x7F,0x10,0x28,0x44,0x00,0x00,0x00},
	{0x00,0x41,0x7F,0x40,0x00,0x00,0x00,0x00},
	{0x00,0x7C,0x04,0x18,0x04,0x78,0x00,0x00},
	{0x00,0x7C,0x08,0x04,0x7C,0x00,0x00,0x00},
	{0x00,0x38,0x44,0x44,0x38,0x00,0x00,0x00},
	{0x00,0xFC,0x24,0x24,0x18,0x00,0x00,0x00},
	{0x00,0x18,0x24,0x24,0xFC,0x00,0x00,0x00},
	{0x00,0x00,0x7C,0x08,0x04,0x00,0x00,0x00},
	{0x00,0x48,0x54,0x54,0x24,0x00,0x00,0x00},
	{0x00,0x04,0x7F,0x44,0x00,0x00,0x00,0x00},
	{0x00,0x3C,0x40,0x40,0x7C,0x00,0x00,0x00},
	{0x00,0x1C,0x20,0x40,0x20,0x1C,0x00,0x00},
	{0x00,0x3C,0x40,0x30,0x40,0x3C,0x00,0x00},
	{0x00,0x44,0x28,0x10,0x28,0x44,0x00,0x00},
	{0x00,0x1C,0xA0,0xA0,0x7C,0x00,0x00,0x00},
	{0x00,0x44,0x64,0x54,0x4C,0x44,0x00,0x00},
	{0x00,0x08,0x36,0x41,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x41,0x36,0x08,0x00,0x00,0x00,0x00},
	{0x00,0x02,0x01,0x01,0x02,0x01,0x00,0x00},
	{0x00,0x02,0x05,0x05,0x02,0x00,0x00,0x00}
#ifdef EXTENDEDFONT
  ,
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0080
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0081
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0082
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0083
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0084
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0085
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0086
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0087
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0088
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0089
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+008A
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+008B
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+008C
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+008D
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+008E
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+008F
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0090
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0091
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0092
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0093
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0094
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0095
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0096
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0097
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0098
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+0099
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+009A
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+009B
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+009C
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+009D
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+009E
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+009F
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},   // U+00A0 (no break space)
	{0x00,0x00,0x00,0x7b,0x00,0x00,0x00,0x00}, // 161 0xa1 ¡
	{0x00,0x18,0x24,0x66,0x24,0x24,0x00,0x00}, // 162 0xa2 ¢
	{0x00,0x7c,0x4a,0x49,0x41,0x60,0x00,0x00}, // 163 0xa3 £
	{0x00,0x00,0x7c,0x28,0x7c,0x00,0x00,0x00}, // 164 0xa4 ¤
	{0x00,0x2a,0x2c,0x78,0x2c,0x2a,0x00,0x00}, // 165 0xa5 ¥
	{0x00,0x00,0x00,0x77,0x00,0x00,0x00,0x00}, // 166 0xa6 ¦
	{0x00,0x5e,0x55,0x55,0x55,0x29,0x00,0x00}, // 167 0xa7 §
	{0x00,0x01,0x00,0x00,0x01,0x00,0x00,0x00}, // 168 0xa8 ¨
	{0x3c,0x42,0x99,0xa5,0xa5,0x81,0x42,0x3c}, // 169 0xa9 ©
	{0x00,0x20,0x32,0x2a,0x2a,0x3c,0x00,0x00}, // 170 0xaa ª
	{0x00,0x08,0x14,0x22,0x08,0x14,0x22,0x00}, // 171 0xab «
	{0x00,0x08,0x08,0x08,0x08,0x08,0x38,0x00}, // 172 0xac ¬
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // 173 0xad ­
	{0x3c,0x42,0xbd,0x95,0x95,0xa9,0x42,0x3c}, // 174 0xae ®
	{0x00,0x01,0x01,0x01,0x01,0x01,0x00,0x00}, // 175 0xaf ¯
	{0x00,0x00,0x06,0x09,0x06,0x00,0x00,0x00}, // 176 0xb0 °
	{0x00,0x00,0x44,0x44,0x5f,0x44,0x44,0x00}, // 177 0xb1 ±
	{0x00,0x00,0x19,0x11,0x15,0x12,0x00,0x00}, // 178 0xb2 ²
	{0x00,0x00,0x11,0x15,0x0a,0x00,0x00,0x00}, // 179 0xb3 ³
	{0x00,0x00,0x02,0x01,0x00,0x00,0x00,0x00}, // 180 0xb4 ´
	{0x00,0x7e,0x10,0x10,0x10,0x0e,0x00,0x00}, // 181 0xb5 µ
	{0x00,0x06,0x09,0x09,0x7f,0x01,0x7f,0x00}, // 182 0xb6 ¶
	{0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00}, // 183 0xb7 ·
	{0x00,0x00,0x40,0x50,0x60,0x00,0x00,0x00}, // 184 0xb8 ¸
	{0x00,0x00,0x0a,0x0f,0x08,0x00,0x00,0x00}, // 185 0xb9 ¹
	{0x00,0x10,0x16,0x19,0x16,0x10,0x00,0x00}, // 186 0xba º
	{0x00,0x22,0x14,0x08,0x22,0x14,0x08,0x00}, // 187 0xbb »
	{0x40,0x2f,0x18,0x08,0x24,0x32,0x29,0x7c}, // 188 0xbc ¼
	{0x00,0x2f,0x10,0x48,0x44,0x6a,0x59,0x00}, // 189 0xbd ½
	{0x00,0x55,0x35,0x1a,0x28,0x34,0x2a,0x7c}, // 190 0xbe ¾
	{0x00,0x30,0x48,0x45,0x20,0x00,0x00,0x00}, // 191 0xbf ¿
	{0x00,0x71,0x29,0x24,0x28,0x70,0x00,0x00}, // 192 0xc0 À
	{0x00,0x70,0x28,0x24,0x29,0x71,0x00,0x00}, // 193 0xc1 Á
	{0x00,0x70,0x2a,0x29,0x2a,0x70,0x00,0x00}, // 194 0xc2 Â
	{0x00,0x72,0x29,0x2b,0x2a,0x71,0x00,0x00}, // 195 0xc3 Ã
	{0x00,0x79,0x14,0x14,0x14,0x79,0x00,0x00}, // 196 0xc4 Ä
	{0x00,0x70,0x2b,0x2b,0x70,0x00,0x00,0x00}, // 197 0xc5 Å
	{0x00,0x7c,0x0a,0x09,0x7f,0x49,0x00,0x00}, // 198 0xc6 Æ
	{0x00,0x0e,0x51,0x51,0x72,0x08,0x00,0x00}, // 199 0xc7 Ç
	{0x00,0x45,0x7d,0x54,0x54,0x00,0x00,0x00}, // 200 0xc8 È
	{0x00,0x44,0x7c,0x55,0x55,0x00,0x00,0x00}, // 201 0xc9 É
	{0x00,0x46,0x7d,0x56,0x54,0x00,0x00,0x00}, // 202 0xca Ê
	{0x00,0x44,0x7d,0x54,0x55,0x00,0x00,0x00}, // 203 0xcb Ë
	{0x00,0x45,0x7d,0x44,0x00,0x00,0x00,0x00}, // 204 0xcc Ì
	{0x00,0x44,0x7c,0x45,0x01,0x00,0x00,0x00}, // 205 0xcd Í
	{0x00,0x4a,0x79,0x4a,0x00,0x00,0x00,0x00}, // 206 0xce Î
	{0x00,0x45,0x7c,0x45,0x00,0x00,0x00,0x00}, // 207 0xcf Ï
	{0x00,0x4a,0x7e,0x4a,0x42,0x3c,0x00,0x00}, // 208 0xd0 Ð
	{0x00,0x7d,0x19,0x31,0x7d,0x00,0x00,0x00}, // 209 0xd1 Ñ
	{0x00,0x32,0x4a,0x48,0x48,0x30,0x00,0x00}, // 210 0xd2 Ò
	{0x00,0x30,0x48,0x48,0x4a,0x32,0x00,0x00}, // 211 0xd3 Ó
	{0x00,0x30,0x4a,0x49,0x4a,0x30,0x00,0x00}, // 212 0xd4 Ô
	{0x00,0x32,0x49,0x4b,0x4a,0x31,0x00,0x00}, // 213 0xd5 Õ
	{0x00,0x30,0x4a,0x48,0x4a,0x30,0x00,0x00}, // 214 0xd6 Ö
	{0x00,0x22,0x14,0x08,0x14,0x22,0x00,0x00}, // 215 0xd7 ×
	{0x40,0x3c,0x32,0x08,0x26,0x1e,0x01,0x00}, // 216 0xd8 Ø
	{0x00,0x00,0x3d,0x41,0x40,0x3c,0x00,0x00}, // 217 0xd9 Ù
	{0x00,0x00,0x3c,0x40,0x41,0x3d,0x00,0x00}, // 218 0xda Ú
	{0x00,0x00,0x3a,0x41,0x41,0x3a,0x00,0x00}, // 219 0xdb Û
	{0x00,0x00,0x3d,0x40,0x40,0x3d,0x00,0x00}, // 220 0xdc Ü
	{0x00,0x00,0x0c,0x70,0x11,0x0d,0x00,0x00}, // 221 0xdd Ý
	{0x00,0x81,0xff,0x24,0x24,0x18,0x00,0x00}, // 222 0xde Þ
	{0x00,0xfc,0x2a,0x2a,0x14,0x00,0x00,0x00}, // 223 0xdf ß
	{0x00,0x21,0x55,0x54,0x78,0x40,0x00,0x00}, // 224 0xe0 à
	{0x00,0x20,0x54,0x55,0x79,0x40,0x00,0x00}, // 225 0xe1 á
	{0x00,0x02,0x21,0x55,0x55,0x79,0x42,0x00}, // 226 0xe2 â
	{0x00,0x22,0x55,0x54,0x7a,0x41,0x00,0x00}, // 227 0xe3 ã
	{0x00,0x21,0x54,0x54,0x79,0x40,0x00,0x00}, // 228 0xe4 ä
	{0x00,0x20,0x57,0x57,0x78,0x40,0x00,0x00}, // 229 0xe5 å
	{0x00,0x20,0x54,0x54,0x7c,0x54,0x48,0x00}, // 230 0xe6 æ
	{0x00,0x18,0xa4,0xa4,0xc0,0x00,0x00,0x00}, // 231 0xe7 ç
	{0x00,0x39,0x55,0x54,0x54,0x18,0x00,0x00}, // 232 0xe8 è
	{0x00,0x38,0x54,0x55,0x55,0x18,0x00,0x00}, // 233 0xe9 é
	{0x00,0x02,0x39,0x55,0x55,0x55,0x1a,0x00}, // 234 0xea ê
	{0x00,0x39,0x54,0x54,0x55,0x18,0x00,0x00}, // 235 0xeb ë
	{0x00,0x01,0x45,0x7c,0x40,0x00,0x00,0x00}, // 236 0xec ì
	{0x00,0x00,0x45,0x7d,0x40,0x00,0x00,0x00}, // 237 0xed í
	{0x00,0x02,0x45,0x7d,0x41,0x02,0x00,0x00}, // 238 0xee î
	{0x00,0x01,0x44,0x7c,0x41,0x00,0x00,0x00}, // 239 0xef ï
	{0x00,0x22,0x52,0x52,0x3c,0x00,0x00,0x00}, // 240 0xf0 ð
	{0x00,0x7a,0x0a,0x0a,0x70,0x00,0x00,0x00}, // 241 0xf1 ñ
	{0x00,0x32,0x4a,0x48,0x30,0x00,0x00,0x00}, // 242 0xf2 ò
	{0x00,0x30,0x48,0x4a,0x32,0x00,0x00,0x00}, // 243 0xf3 ó
	{0x00,0x32,0x49,0x49,0x32,0x00,0x00,0x00}, // 244 0xf4 ô
	{0x00,0x32,0x49,0x48,0x32,0x01,0x00,0x00}, // 245 0xf5 õ
	{0x00,0x32,0x48,0x48,0x32,0x00,0x00,0x00}, // 246 0xf6 ö
	{0x00,0x08,0x08,0x2a,0x08,0x08,0x00,0x00}, // 247 0xf7 ÷
	{0x00,0x58,0x24,0x3c,0x24,0x1a,0x00,0x00}, // 248 0xf8 ø
	{0x00,0x3a,0x42,0x40,0x78,0x40,0x00,0x00}, // 249 0xf9 ù
	{0x00,0x38,0x40,0x42,0x7a,0x40,0x00,0x00}, // 250 0xfa ú
	{0x00,0x3a,0x41,0x41,0x7a,0x40,0x00,0x00}, // 251 0xfb û
	{0x00,0x3a,0x40,0x40,0x7a,0x40,0x00,0x00}, // 252 0xfc ü
	{0x00,0x98,0xa0,0xa2,0x7a,0x00,0x00,0x00}, // 253 0xfd ý
	{0x00,0x7c,0x28,0x28,0x28,0x10,0x00,0x00}, // 254 0xfe þ
	{0x00,0x9a,0xa0,0xa0,0x7a,0x00,0x00,0x00} // 255 0xff ÿ
#endif
};


// Big numbers font, from 0 to 9 - 96 bytes each.
const byte bigNumbers [][96] PROGMEM = {
{0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
0xF0, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x0F,
0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x00, 0x00, 0x00},

{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF0,
0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},

{0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
0xF0, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xC1, 0xC0, 0xC0, 0xC0,
0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE1, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
0x03, 0x03, 0x83, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x0F, 0x0F,
0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00},

{0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
0xF0, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xC1, 0xC0, 0xC0, 0xC0,
0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE1, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x81, 0x83, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x87,
0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x0F, 0x0F,
0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00},

{0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF0, 0xF0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
0xF0, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07,
0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00},

{0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
0xF0, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1,
0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC1, 0x81, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x81, 0x83, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x87,
0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x0F, 0x0F,
0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00},

{0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
0xF0, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1,
0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC1, 0x81, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x87,
0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x0F, 0x0F,
0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00},

{0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
0xF0, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00},

{0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
0xF0, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xE1,
0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE1, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0x87, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x87,
0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x0F, 0x0F,
0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00},

{0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
0xF0, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1,
0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE1, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07,
0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0F, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00},

{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x3C, 0x7E, 0x7E, 0x7E, 0x7E, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
};



// ====================== LOW LEVEL =========================

void OzOLED::sendCommand(byte command){
	Wire.beginTransmission(OLED_ADDRESS); // begin transmitting
	Wire.write(OzOLED_COMMAND_MODE);//data mode
	Wire.write(command);
	Wire.endTransmission();    // stop transmitting
}


void OzOLED::sendData(byte data){
	
	Wire.beginTransmission(OLED_ADDRESS); // begin transmitting
	Wire.write(OzOLED_DATA_MODE);//data mode
	Wire.write(data);
	Wire.endTransmission();    // stop transmitting

}

/*** 
 * printChar takes signed char as input, but converts to unsigned
 * before output in order to print chars > 127
 */
void OzOLED::printChar(char C, byte X, byte Y){

	if ( X < 128 )
		setCursorXY(X, Y);

  byte c = C;
	//Ignore unused ASCII characters. Modified the range to support multilingual characters.
#ifdef EXTENDEDFONT	
  c = (C < 0)?(C + 256):C;
	if(c < 32 || (c > 127 && c < 161) )
#else
  if(c < 32 || c > 127)
#endif
		c='*'; //star - indicate characters that can't be displayed

	
    for(byte i=0; i<8; i++) {
	
       //read bytes from code memory
       sendData(pgm_read_byte(&BasicFont[c-32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
	 
    }
}

void OzOLED::printString(const char *String, byte X, byte Y, byte numChar){

	if ( X < 128 )
		setCursorXY(X, Y);

	byte count=0;
    while(String[count] && count<numChar){
		printChar(String[count++]) ;
	}

}


byte OzOLED::printNumber(long long_num, byte X, byte Y){

	if ( X < 128 )
		setCursorXY(X, Y);


	byte char_buffer[10] = "";
	byte i = 0;
	byte f = 0; // number of characters

	if (long_num < 0) {
	
		f++;
		printChar('-');
		long_num = -long_num;
	
	} 
	else if (long_num == 0) {
	
		f++;
		printChar('0');
		return f;
	
	} 

	while (long_num > 0) {
	
		char_buffer[i++] = long_num % 10;
		long_num /= 10;
	
	}

	f += i;
	for(; i > 0; i--) {

		printChar('0'+ char_buffer[i - 1]);

	}
	
	return f;

}




byte OzOLED::printNumber(float float_num, byte prec, byte X, byte Y){

	if ( X < 128 )
		setCursorXY(X, Y);

// prec - 6 maximum

	byte num_int = 0;
	byte num_frac = 0;
	byte num_extra = 0;
	
	long d = float_num; // get the integer part
	float f = float_num - d; // get the fractional part
	
	
	if (d == 0 && f < 0.0){
	
		printChar('-');
		num_extra++;
		printChar('0');
		num_extra++;
		f *= -1;
		
	}
	else if (d < 0 && f < 0.0){
	
		num_int = printNumber(d); // count how many digits in integer part
		f *= -1;
		
	}
	else{
	
		num_int = printNumber(d); // count how many digits in integer part
	
	}
	
	// only when fractional part > 0, we show decimal point
	if (f > 0.0){
	
		printChar('.');
		num_extra++;
	
		long f_shift = 1;
		
		if (num_int + prec > 8) 
			prec = 8 - num_int;
		
		for (byte j=0; j<prec; j++){
			f_shift *= 10;
		}

		num_frac = printNumber((long)(f*f_shift)); // count how many digits in fractional part
		
	}
	
	return num_int + num_frac + num_extra;

}



void OzOLED::printBigNumber(const char *number, byte X, byte Y, byte numChar){
// big number pixels: 24 x 32

 // Y - page
	byte column = 0;
	byte count = 0;

	while(number[count] && count<numChar){
	
	
		setCursorXY(X, Y);
		
		for(byte i=0; i<96; i++) {
		
			// if character is not "0-9" or ':'
			if(number[count] < 48 || number[count] > 58)	
				sendData(0);
			else 				
				sendData(pgm_read_byte(&bigNumbers[number[count]-48][i]));
			
			
			if(column >= 23){
				column = 0;
				setCursorXY(X, ++Y);
			}
			else				
				column++;

		}
		
		count++;
		
		X = X + 3;
		Y = Y - 4;
		
	
	}
}

void OzOLED::drawBitmap(const byte *bitmaparray, byte X, byte Y, byte width, byte height){

// max width = 16
// max height = 8

	setCursorXY( X, Y );
	
	byte column = 0; 
	for(int i=0; i<width*8*height; i++) {  

		sendData(pgm_read_byte(&bitmaparray[i]));
		
		if(++column == width*8) {
			column = 0;
			setCursorXY( X, ++Y );
		} 
	}
}


static uint8_t col = 0;
static uint8_t page = 0;

/**
 * Draw a pattern 8 bits high using stored column and page.
 * 
 */
void OzOLED::draw_pattern(uint8_t width, uint8_t pattern) {
  draw_pattern(col, page, width,  pattern);
}

void OzOLED::draw_pattern(uint8_t set_col, uint8_t set_page, uint8_t width,  uint8_t pattern) {
  //set_area(set_col, set_page, width, height - 1);
	setCursorXY(set_col, set_page);
  //ssd1306_send_data_start();
  Wire.beginTransmission(OLED_ADDRESS); // begin transmitting
  for (uint8_t i = 0; i < (width ); i++) {
    Wire.write(pattern);
  }
  Wire.endTransmission();

  col = set_col + width;
  page = set_page;
}

/**
 * Set position to be used with short version of draw_pattern
 */
void OzOLED::set_pos(uint8_t set_col, uint8_t set_page) {
  if ( set_col < 128 ) {
    col = set_col;
    page = set_page;
  }
}


// =================== High Level ===========================


void OzOLED::init(){
  
#ifdef CUSTOMADDRESS
  if(!OLED_ADDRESS)
    OLED_ADDRESS = 0x3C;
#endif
	Wire.begin();
	
	// upgrade to 400KHz! (only use when your other i2c device support this speed)
	if (I2C_400KHZ){
		// save I2C bitrate (default 100Khz)
		byte twbrbackup = TWBR;
		TWBR = 12; 
		//TWBR = twbrbackup;
		//Serial.println(TWBR, DEC);
		//Serial.println(TWSR & 0x3, DEC);
	}
	
  setPowerOff(); 	//display off
  delay(10);
  setPowerOn();	//display on
  delay(10); 
  setNormalDisplay();  //default Set Normal Display
	setPageMode();	// default addressing mode
	clearDisplay();
	setCursorXY(0,0);
	

}

void OzOLED::setCursorXY(byte X, byte Y){
	// Y - 1 unit = 1 page (8 pixel rows)
	// X - 1 unit = 8 pixel columns

	sendCommand(0x00 + (((8*X) + XOFFSET) & 0x0F)); 		//set column lower address
	sendCommand(0x10 + (((8*X) + XOFFSET)>>4 &0x0F));
	sendCommand(0xB0 + Y); 					//set page address
	
}

void OzOLED::clearDisplay()	{


	for(byte page=0; page<8; page++) {	
	
		setCursorXY(0, page);     
		for(byte column=0; column<128; column++){  //clear all columns
			sendData(0);    
		}

	}
	
	setCursorXY(0,0);  
	
}

/*
void OzOLED::clearPage(byte page)	{
	// clear page and set cursor at beginning of that page

	setCursorXY(0, page);    
	for(byte column=0; column<128; column++){  //clear all columns
		sendData(0x00);    
	}
	
}
*/


void OzOLED::setInverseDisplay(){

	sendCommand(OzOLED_CMD_INVERSE_DISPLAY);
	
}

void OzOLED::setNormalDisplay(){

	sendCommand(OzOLED_CMD_NORMAL_DISPLAY);
	
}

void OzOLED::setPowerOff(){

	sendCommand(OzOLED_CMD_DISPLAY_OFF);
	
}

void OzOLED::setPowerOn(){

	sendCommand(OzOLED_CMD_DISPLAY_ON);
	
}

void OzOLED::setBrightness(byte Brightness){

	sendCommand(OzOLED_CMD_SET_BRIGHTNESS);
	sendCommand(Brightness);
   
}

void OzOLED::setPageMode(){
	addressingMode = PAGE_ADDRESSING;
	sendCommand(0x20); 				//set addressing mode
	sendCommand(PAGE_ADDRESSING); 	//set page addressing mode
}

void OzOLED::setHorizontalMode(){
	addressingMode = HORIZONTAL_ADDRESSING;
	sendCommand(0x20); 				//set addressing mode
	sendCommand(HORIZONTAL_ADDRESSING); 	//set page addressing mode
}


/**
 * Reverse scan direction
 */
void OzOLED::setScanDirectionDec() {
	sendCommand(OzOLED_CMD_COMSCANDEC);
}
void OzOLED::setSegReMap() {
	sendCommand(OzOLED_CMD_SEGREMAP);
}

void OzOLED::setSegNormal() {
	sendCommand(OzOLED_CMD_SEGNOMAP);
}

/**
 * Normal scan direction
 */
void OzOLED::setScanDirectionInc() {
	sendCommand(OzOLED_CMD_NORMAL_SCAN);
}

/**
 * Turn display upside down
 */
void OzOLED::verticalFlip() {
	sendCommand(OzOLED_CMD_COMSCANDEC);
	sendCommand(OzOLED_CMD_SEGREMAP);
}

/**
 * Normal display 
 */
void OzOLED::verticalNormal() {
	sendCommand(OzOLED_CMD_NORMAL_SCAN);
	sendCommand(OzOLED_CMD_SEGNOMAP);
}


// startscrollright
// Activate a right handed scroll for rows start through stop
// Hint, the display is 16 rows tall. To scroll the whole display, run:
// scrollRight(0x00, 0x0F)  - start - stop
void OzOLED::scrollRight(byte start, byte end, byte speed){

    sendCommand(OzOLED_RIGHT_SCROLL);  //Horizontal Scroll Setup
    sendCommand(0x00);	// dummy byte 
    sendCommand(start);	// start page address
    sendCommand(speed);	// set time interval between each scroll
    sendCommand(end);	// end page address
	
    sendCommand(0x01);  
    sendCommand(0xFF);
	
    sendCommand(0x2f);  //active scrolling
	
}


// startscrollleft
// Activate a right handed scroll for rows start through stop
// Hint, the display is 16 rows tall. To scroll the whole display, run:
// display.scrollright(0x00, 0x0F)   - start - stop
void OzOLED::scrollLeft(byte start, byte end, byte speed){

    sendCommand(OzOLED_LEFT_SCROLL);  //Horizontal Scroll Setup
    sendCommand(0x00);	// dummy byte
    sendCommand(start);	// start page address
    sendCommand(speed);	// set time interval between each scroll
    sendCommand(end);	// end page address
	
    sendCommand(0x01);  
    sendCommand(0xFF);  
	
    sendCommand(0x2f);  //active scrolling
	
}

// startscrolldiagright
// Activate a diagonal scroll for rows start through stop
// Hint, the display is 16 rows tall. To scroll the whole display, run:
// display.scrollright(0x00, 0x0F) 
void OzOLED::scrollDiagRight(){

        sendCommand(OzOLED_SET_VERTICAL_SCROLL_AREA);        
        sendCommand(0X00);
        sendCommand(OzOLED_Max_Y);
        sendCommand(OzOLED_VERTICAL_RIGHT_SCROLL); //Vertical and Horizontal Scroll Setup
        sendCommand(0X00); 	//dummy byte
        sendCommand(0x00);	 //define page0 as startpage address
        sendCommand(0X00);	//set time interval between each scroll ste as 6 frames
        sendCommand(0x07);	//define page7 as endpage address
        sendCommand(0X01);	//set vertical scrolling offset as 1 row
        sendCommand(OzOLED_CMD_ACTIVATE_SCROLL); //active scrolling
	
}

void OzOLED::scrollDiagLeft(){

        sendCommand(OzOLED_SET_VERTICAL_SCROLL_AREA);        
        sendCommand(0X00);
        sendCommand(OzOLED_Max_Y);
        sendCommand(OzOLED_VERTICAL_LEFT_SCROLL); //Vertical and Horizontal Scroll Setup
        sendCommand(0X00); //dummy byte
        sendCommand(0x00);	 //define page0 as startpage address
        sendCommand(0X00);	//set time interval between each scroll ste as 6 frames
        sendCommand(0x07);	//define page7 as endpage address
        sendCommand(0X01);	//set vertical scrolling offset as 1 row
        sendCommand(OzOLED_CMD_ACTIVATE_SCROLL); //active scrolling
	
}


void OzOLED::setActivateScroll(byte direction, byte startPage, byte endPage, byte scrollSpeed){


/*
This function is still not complete, we need more testing also.
Use the following defines for 'direction' :

 Scroll_Left			
 Scroll_Right			

For Scroll_vericle, still need to debug more... 

Use the following defines for 'scrollSpeed' :

 Scroll_2Frames		
 Scroll_3Frames
 Scroll_4Frames
 Scroll_5Frames	
 Scroll_25Frames
 Scroll_64Frames
 Scroll_128Frames
 Scroll_256Frames

*/


	if(direction == Scroll_Right) {
	
		//Scroll Right
		sendCommand(0x26);
		
	}
	else {
	
		//Scroll Left  
		sendCommand(0x27);

	}
	/*
	else if (direction == Scroll_Up ){
	
		//Scroll Up  
		sendCommand(0x29);
	
	}
	else{
	
		//Scroll Down  
		sendCommand(0x2A);
	
	}
	*/
	sendCommand(0x00);//dummy byte
	sendCommand(startPage);
	sendCommand(scrollSpeed);	
	sendCommand(endPage);		// for verticle scrolling, use 0x29 as command, endPage should = start page = 0
	
	/*
	if(direction == Scroll_Up) {
	
		sendCommand(0x01);

	}
	*/

	sendCommand(OzOLED_CMD_ACTIVATE_SCROLL);

}

void OzOLED::setDeactivateScroll(){

	sendCommand(OzOLED_CMD_DEACTIVATE_SCROLL);

}

OzOLED OzOled;  // Preinstantiate Objects

